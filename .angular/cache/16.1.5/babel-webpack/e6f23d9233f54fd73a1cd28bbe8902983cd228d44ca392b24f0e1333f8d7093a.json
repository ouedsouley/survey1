{"ast":null,"code":"import _asyncToGenerator from \"D:/ionic/survey-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport { Directory, Filesystem } from '@capacitor/filesystem';\nimport { Preferences } from '@capacitor/preferences';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nlet PhotoService = /*#__PURE__*/(() => {\n  class PhotoService {\n    constructor(platform) {\n      this.photos = [];\n      this.PHOTO_STORAGE = 'photos';\n      this.platform = platform;\n    }\n    addNewToGallery() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        // Take a photo\n        const capturedPhoto = yield Camera.getPhoto({\n          resultType: CameraResultType.Uri,\n          source: CameraSource.Camera,\n          quality: 100\n        });\n        _this.photos.unshift({\n          filepath: \"soon...\",\n          webviewPath: capturedPhoto.webPath\n        });\n        const savedImageFile = yield _this.savePicture(capturedPhoto);\n        _this.photos.unshift(savedImageFile);\n        Preferences.set({\n          key: _this.PHOTO_STORAGE,\n          value: JSON.stringify(_this.photos)\n        });\n      })();\n    }\n    loadSaved() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        // Retrieve cached photo array data\n        const {\n          value\n        } = yield Preferences.get({\n          key: _this2.PHOTO_STORAGE\n        });\n        _this2.photos = value ? JSON.parse(value) : [];\n        if (!_this2.platform.is('hybrid')) {\n          for (let photo of _this2.photos) {\n            // Read each saved photo's data from the Filesystem\n            const readFile = yield Filesystem.readFile({\n              path: photo.filepath,\n              directory: Directory.Data\n            });\n            // Web platform only: Load the photo as base64 data\n            photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\n          }\n        }\n      })();\n    }\n  }\n  PhotoService.ɵfac = function PhotoService_Factory(t) {\n    return new (t || PhotoService)(i0.ɵɵinject(i1.Platform));\n  };\n  PhotoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PhotoService,\n    factory: PhotoService.ɵfac,\n    providedIn: 'root'\n  });\n  return PhotoService;\n})();\nexport { PhotoService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}