{"ast":null,"code":"import _asyncToGenerator from \"D:/ionic/survey-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin, buildRequestInit } from '@capacitor/core';\nimport { Encoding } from './definitions';\nfunction resolve(path) {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix = [];\n  posix.forEach(item => {\n    if (item === '..' && newPosix.length > 0 && newPosix[newPosix.length - 1] !== '..') {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n  return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n  return parent !== children && pathsA.every((value, index) => value === pathsB[index]);\n}\nexport class FilesystemWeb extends WebPlugin {\n  constructor() {\n    var _this;\n    super(...arguments);\n    _this = this;\n    this.DB_VERSION = 1;\n    this.DB_NAME = 'Disc';\n    this._writeCmds = ['add', 'put', 'delete'];\n    /**\n     * Function that performs a http request to a server and downloads the file to the specified destination\n     *\n     * @param options the options for the download operation\n     * @returns a promise that resolves with the download file result\n     */\n    this.downloadFile = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (options) {\n        const requestInit = buildRequestInit(options, options.webFetchExtra);\n        const response = yield fetch(options.url, requestInit);\n        let blob;\n        if (!(options === null || options === void 0 ? void 0 : options.progress)) blob = yield response.blob();else if (!(response === null || response === void 0 ? void 0 : response.body)) blob = new Blob();else {\n          const reader = response.body.getReader();\n          let bytes = 0;\n          const chunks = [];\n          const contentType = response.headers.get('content-type');\n          const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n          while (true) {\n            const {\n              done,\n              value\n            } = yield reader.read();\n            if (done) break;\n            chunks.push(value);\n            bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n            const status = {\n              url: options.url,\n              bytes,\n              contentLength\n            };\n            _this.notifyListeners('progress', status);\n          }\n          const allChunks = new Uint8Array(bytes);\n          let position = 0;\n          for (const chunk of chunks) {\n            if (typeof chunk === 'undefined') continue;\n            allChunks.set(chunk, position);\n            position += chunk.length;\n          }\n          blob = new Blob([allChunks.buffer], {\n            type: contentType || undefined\n          });\n        }\n        const blobUrl = URL.createObjectURL(blob);\n        const tempAnchor = document.createElement('a');\n        document.body.appendChild(tempAnchor);\n        tempAnchor.href = blobUrl;\n        tempAnchor.download = options.path; // This should be a filename, not a path\n        tempAnchor.click();\n        URL.revokeObjectURL(blobUrl);\n        document.body.removeChild(tempAnchor);\n        return {\n          path: options.path,\n          blob\n        };\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n  initDb() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2._db !== undefined) {\n        return _this2._db;\n      }\n      if (!('indexedDB' in window)) {\n        throw _this2.unavailable(\"This browser doesn't support IndexedDB\");\n      }\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(_this2.DB_NAME, _this2.DB_VERSION);\n        request.onupgradeneeded = FilesystemWeb.doUpgrade;\n        request.onsuccess = () => {\n          _this2._db = request.result;\n          resolve(request.result);\n        };\n        request.onerror = () => reject(request.error);\n        request.onblocked = () => {\n          console.warn('db blocked');\n        };\n      });\n    })();\n  }\n  static doUpgrade(event) {\n    const eventTarget = event.target;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default:\n        {\n          if (db.objectStoreNames.contains('FileStorage')) {\n            db.deleteObjectStore('FileStorage');\n          }\n          const store = db.createObjectStore('FileStorage', {\n            keyPath: 'path'\n          });\n          store.createIndex('by_folder', 'folder');\n        }\n    }\n  }\n  dbRequest(cmd, args) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const readFlag = _this3._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n      return _this3.initDb().then(conn => {\n        return new Promise((resolve, reject) => {\n          const tx = conn.transaction(['FileStorage'], readFlag);\n          const store = tx.objectStore('FileStorage');\n          const req = store[cmd](...args);\n          req.onsuccess = () => resolve(req.result);\n          req.onerror = () => reject(req.error);\n        });\n      });\n    })();\n  }\n  dbIndexRequest(indexName, cmd, args) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const readFlag = _this4._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n      return _this4.initDb().then(conn => {\n        return new Promise((resolve, reject) => {\n          const tx = conn.transaction(['FileStorage'], readFlag);\n          const store = tx.objectStore('FileStorage');\n          const index = store.index(indexName);\n          const req = index[cmd](...args);\n          req.onsuccess = () => resolve(req.result);\n          req.onerror = () => reject(req.error);\n        });\n      });\n    })();\n  }\n  getPath(directory, uriPath) {\n    const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n  clear() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const conn = yield _this5.initDb();\n      const tx = conn.transaction(['FileStorage'], 'readwrite');\n      const store = tx.objectStore('FileStorage');\n      store.clear();\n    })();\n  }\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  readFile(options) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const path = _this6.getPath(options.directory, options.path);\n      // const encoding = options.encoding;\n      const entry = yield _this6.dbRequest('get', [path]);\n      if (entry === undefined) throw Error('File does not exist.');\n      return {\n        data: entry.content ? entry.content : ''\n      };\n    })();\n  }\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  writeFile(options) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const path = _this7.getPath(options.directory, options.path);\n      let data = options.data;\n      const encoding = options.encoding;\n      const doRecursive = options.recursive;\n      const occupiedEntry = yield _this7.dbRequest('get', [path]);\n      if (occupiedEntry && occupiedEntry.type === 'directory') throw Error('The supplied path is a directory.');\n      const parentPath = path.substr(0, path.lastIndexOf('/'));\n      const parentEntry = yield _this7.dbRequest('get', [parentPath]);\n      if (parentEntry === undefined) {\n        const subDirIndex = parentPath.indexOf('/', 1);\n        if (subDirIndex !== -1) {\n          const parentArgPath = parentPath.substr(subDirIndex);\n          yield _this7.mkdir({\n            path: parentArgPath,\n            directory: options.directory,\n            recursive: doRecursive\n          });\n        }\n      }\n      if (!encoding) {\n        data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n        if (!_this7.isBase64String(data)) throw Error('The supplied data is not valid base64 content.');\n      }\n      const now = Date.now();\n      const pathObj = {\n        path: path,\n        folder: parentPath,\n        type: 'file',\n        size: data.length,\n        ctime: now,\n        mtime: now,\n        content: data\n      };\n      yield _this7.dbRequest('put', [pathObj]);\n      return {\n        uri: pathObj.path\n      };\n    })();\n  }\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  appendFile(options) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const path = _this8.getPath(options.directory, options.path);\n      let data = options.data;\n      const encoding = options.encoding;\n      const parentPath = path.substr(0, path.lastIndexOf('/'));\n      const now = Date.now();\n      let ctime = now;\n      const occupiedEntry = yield _this8.dbRequest('get', [path]);\n      if (occupiedEntry && occupiedEntry.type === 'directory') throw Error('The supplied path is a directory.');\n      const parentEntry = yield _this8.dbRequest('get', [parentPath]);\n      if (parentEntry === undefined) {\n        const subDirIndex = parentPath.indexOf('/', 1);\n        if (subDirIndex !== -1) {\n          const parentArgPath = parentPath.substr(subDirIndex);\n          yield _this8.mkdir({\n            path: parentArgPath,\n            directory: options.directory,\n            recursive: true\n          });\n        }\n      }\n      if (!encoding && !_this8.isBase64String(data)) throw Error('The supplied data is not valid base64 content.');\n      if (occupiedEntry !== undefined) {\n        if (occupiedEntry.content !== undefined && !encoding) {\n          data = btoa(atob(occupiedEntry.content) + atob(data));\n        } else {\n          data = occupiedEntry.content + data;\n        }\n        ctime = occupiedEntry.ctime;\n      }\n      const pathObj = {\n        path: path,\n        folder: parentPath,\n        type: 'file',\n        size: data.length,\n        ctime: ctime,\n        mtime: now,\n        content: data\n      };\n      yield _this8.dbRequest('put', [pathObj]);\n    })();\n  }\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  deleteFile(options) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const path = _this9.getPath(options.directory, options.path);\n      const entry = yield _this9.dbRequest('get', [path]);\n      if (entry === undefined) throw Error('File does not exist.');\n      const entries = yield _this9.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n      if (entries.length !== 0) throw Error('Folder is not empty.');\n      yield _this9.dbRequest('delete', [path]);\n    })();\n  }\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  mkdir(options) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const path = _this10.getPath(options.directory, options.path);\n      const doRecursive = options.recursive;\n      const parentPath = path.substr(0, path.lastIndexOf('/'));\n      const depth = (path.match(/\\//g) || []).length;\n      const parentEntry = yield _this10.dbRequest('get', [parentPath]);\n      const occupiedEntry = yield _this10.dbRequest('get', [path]);\n      if (depth === 1) throw Error('Cannot create Root directory');\n      if (occupiedEntry !== undefined) throw Error('Current directory does already exist.');\n      if (!doRecursive && depth !== 2 && parentEntry === undefined) throw Error('Parent directory must exist');\n      if (doRecursive && depth !== 2 && parentEntry === undefined) {\n        const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n        yield _this10.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive\n        });\n      }\n      const now = Date.now();\n      const pathObj = {\n        path: path,\n        folder: parentPath,\n        type: 'directory',\n        size: 0,\n        ctime: now,\n        mtime: now\n      };\n      yield _this10.dbRequest('put', [pathObj]);\n    })();\n  }\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  rmdir(options) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        path,\n        directory,\n        recursive\n      } = options;\n      const fullPath = _this11.getPath(directory, path);\n      const entry = yield _this11.dbRequest('get', [fullPath]);\n      if (entry === undefined) throw Error('Folder does not exist.');\n      if (entry.type !== 'directory') throw Error('Requested path is not a directory');\n      const readDirResult = yield _this11.readdir({\n        path,\n        directory\n      });\n      if (readDirResult.files.length !== 0 && !recursive) throw Error('Folder is not empty');\n      for (const entry of readDirResult.files) {\n        const entryPath = `${path}/${entry.name}`;\n        const entryObj = yield _this11.stat({\n          path: entryPath,\n          directory\n        });\n        if (entryObj.type === 'file') {\n          yield _this11.deleteFile({\n            path: entryPath,\n            directory\n          });\n        } else {\n          yield _this11.rmdir({\n            path: entryPath,\n            directory,\n            recursive\n          });\n        }\n      }\n      yield _this11.dbRequest('delete', [fullPath]);\n    })();\n  }\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  readdir(options) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      const path = _this12.getPath(options.directory, options.path);\n      const entry = yield _this12.dbRequest('get', [path]);\n      if (options.path !== '' && entry === undefined) throw Error('Folder does not exist.');\n      const entries = yield _this12.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n      const files = yield Promise.all(entries.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (e) {\n          let subEntry = yield _this12.dbRequest('get', [e]);\n          if (subEntry === undefined) {\n            subEntry = yield _this12.dbRequest('get', [e + '/']);\n          }\n          return {\n            name: e.substring(path.length + 1),\n            type: subEntry.type,\n            size: subEntry.size,\n            ctime: subEntry.ctime,\n            mtime: subEntry.mtime,\n            uri: subEntry.path\n          };\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n      return {\n        files: files\n      };\n    })();\n  }\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  getUri(options) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const path = _this13.getPath(options.directory, options.path);\n      let entry = yield _this13.dbRequest('get', [path]);\n      if (entry === undefined) {\n        entry = yield _this13.dbRequest('get', [path + '/']);\n      }\n      return {\n        uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path\n      };\n    })();\n  }\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  stat(options) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      const path = _this14.getPath(options.directory, options.path);\n      let entry = yield _this14.dbRequest('get', [path]);\n      if (entry === undefined) {\n        entry = yield _this14.dbRequest('get', [path + '/']);\n      }\n      if (entry === undefined) throw Error('Entry does not exist.');\n      return {\n        type: entry.type,\n        size: entry.size,\n        ctime: entry.ctime,\n        mtime: entry.mtime,\n        uri: entry.path\n      };\n    })();\n  }\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  rename(options) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      yield _this15._copy(options, true);\n      return;\n    })();\n  }\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  copy(options) {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      return _this16._copy(options, false);\n    })();\n  }\n  requestPermissions() {\n    return _asyncToGenerator(function* () {\n      return {\n        publicStorage: 'granted'\n      };\n    })();\n  }\n  checkPermissions() {\n    return _asyncToGenerator(function* () {\n      return {\n        publicStorage: 'granted'\n      };\n    })();\n  }\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  _copy(options, doRename = false) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      let {\n        toDirectory\n      } = options;\n      const {\n        to,\n        from,\n        directory: fromDirectory\n      } = options;\n      if (!to || !from) {\n        throw Error('Both to and from must be provided');\n      }\n      // If no \"to\" directory is provided, use the \"from\" directory\n      if (!toDirectory) {\n        toDirectory = fromDirectory;\n      }\n      const fromPath = _this17.getPath(fromDirectory, from);\n      const toPath = _this17.getPath(toDirectory, to);\n      // Test that the \"to\" and \"from\" locations are different\n      if (fromPath === toPath) {\n        return {\n          uri: toPath\n        };\n      }\n      if (isPathParent(fromPath, toPath)) {\n        throw Error('To path cannot contain the from path');\n      }\n      // Check the state of the \"to\" location\n      let toObj;\n      try {\n        toObj = yield _this17.stat({\n          path: to,\n          directory: toDirectory\n        });\n      } catch (e) {\n        // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n        const toPathComponents = to.split('/');\n        toPathComponents.pop();\n        const toPath = toPathComponents.join('/');\n        // Check the containing directory of the \"to\" location exists\n        if (toPathComponents.length > 0) {\n          const toParentDirectory = yield _this17.stat({\n            path: toPath,\n            directory: toDirectory\n          });\n          if (toParentDirectory.type !== 'directory') {\n            throw new Error('Parent directory of the to path is a file');\n          }\n        }\n      }\n      // Cannot overwrite a directory\n      if (toObj && toObj.type === 'directory') {\n        throw new Error('Cannot overwrite a directory with a file');\n      }\n      // Ensure the \"from\" object exists\n      const fromObj = yield _this17.stat({\n        path: from,\n        directory: fromDirectory\n      });\n      // Set the mtime/ctime of the supplied path\n      const updateTime = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (path, ctime, mtime) {\n          const fullPath = _this17.getPath(toDirectory, path);\n          const entry = yield _this17.dbRequest('get', [fullPath]);\n          entry.ctime = ctime;\n          entry.mtime = mtime;\n          yield _this17.dbRequest('put', [entry]);\n        });\n        return function updateTime(_x3, _x4, _x5) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n      const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n      switch (fromObj.type) {\n        // The \"from\" object is a file\n        case 'file':\n          {\n            // Read the file\n            const file = yield _this17.readFile({\n              path: from,\n              directory: fromDirectory\n            });\n            // Optionally remove the file\n            if (doRename) {\n              yield _this17.deleteFile({\n                path: from,\n                directory: fromDirectory\n              });\n            }\n            let encoding;\n            if (!_this17.isBase64String(file.data)) {\n              encoding = Encoding.UTF8;\n            }\n            // Write the file to the new location\n            const writeResult = yield _this17.writeFile({\n              path: to,\n              directory: toDirectory,\n              data: file.data,\n              encoding: encoding\n            });\n            // Copy the mtime/ctime of a renamed file\n            if (doRename) {\n              yield updateTime(to, ctime, fromObj.mtime);\n            }\n            // Resolve promise\n            return writeResult;\n          }\n        case 'directory':\n          {\n            if (toObj) {\n              throw Error('Cannot move a directory over an existing object');\n            }\n            try {\n              // Create the to directory\n              yield _this17.mkdir({\n                path: to,\n                directory: toDirectory,\n                recursive: false\n              });\n              // Copy the mtime/ctime of a renamed directory\n              if (doRename) {\n                yield updateTime(to, ctime, fromObj.mtime);\n              }\n            } catch (e) {\n              // ignore\n            }\n            // Iterate over the contents of the from location\n            const contents = (yield _this17.readdir({\n              path: from,\n              directory: fromDirectory\n            })).files;\n            for (const filename of contents) {\n              // Move item from the from directory to the to directory\n              yield _this17._copy({\n                from: `${from}/${filename.name}`,\n                to: `${to}/${filename.name}`,\n                directory: fromDirectory,\n                toDirectory\n              }, doRename);\n            }\n            // Optionally remove the original from directory\n            if (doRename) {\n              yield _this17.rmdir({\n                path: from,\n                directory: fromDirectory\n              });\n            }\n          }\n      }\n      return {\n        uri: toPath\n      };\n    })();\n  }\n  isBase64String(str) {\n    try {\n      return btoa(atob(str)) == str;\n    } catch (err) {\n      return false;\n    }\n  }\n}\nFilesystemWeb._debug = true;","map":{"version":3,"names":["WebPlugin","buildRequestInit","Encoding","resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","constructor","_this","arguments","this","DB_VERSION","DB_NAME","_writeCmds","downloadFile","_ref","_asyncToGenerator","options","requestInit","webFetchExtra","response","fetch","url","blob","progress","body","Blob","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","done","read","status","notifyListeners","allChunks","Uint8Array","position","chunk","set","buffer","type","undefined","blobUrl","URL","createObjectURL","tempAnchor","document","createElement","appendChild","href","download","click","revokeObjectURL","removeChild","_x","apply","initDb","_this2","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","_this3","readFlag","indexOf","then","conn","tx","transaction","objectStore","req","dbIndexRequest","indexName","_this4","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","_this5","readFile","_this6","entry","Error","data","content","writeFile","_this7","encoding","doRecursive","recursive","occupiedEntry","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","appendFile","_this8","btoa","atob","deleteFile","_this9","entries","IDBKeyRange","only","_this10","depth","match","rmdir","_this11","fullPath","readDirResult","readdir","files","entryPath","name","entryObj","stat","_this12","all","map","_ref2","e","subEntry","substring","_x2","getUri","_this13","_this14","rename","_this15","_copy","copy","_this16","requestPermissions","publicStorage","checkPermissions","doRename","_this17","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","_ref3","_x3","_x4","_x5","file","UTF8","writeResult","contents","filename","str","err","_debug"],"sources":["D:/ionic/survey-app/node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\nimport { Encoding } from './definitions';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n        /**\n         * Function that performs a http request to a server and downloads the file to the specified destination\n         *\n         * @param options the options for the download operation\n         * @returns a promise that resolves with the download file result\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!(options === null || options === void 0 ? void 0 : options.progress))\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                const chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                const allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            const blobUrl = URL.createObjectURL(blob);\n            const tempAnchor = document.createElement('a');\n            document.body.appendChild(tempAnchor);\n            tempAnchor.href = blobUrl;\n            tempAnchor.download = options.path; // This should be a filename, not a path\n            tempAnchor.click();\n            URL.revokeObjectURL(blobUrl);\n            document.body.removeChild(tempAnchor);\n            return { path: options.path, blob };\n        };\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                let encoding;\n                if (!this.isBase64String(file.data)) {\n                    encoding = Encoding.UTF8;\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                    encoding: encoding,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename.name}`,\n                        to: `${to}/${filename.name}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}